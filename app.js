// Generated by CoffeeScript 1.6.1
(function() {
  var Game, authClient, chatRef, game,
    _this = this;

  Game = (function() {

    function Game(user) {
      var _this = this;
      this.user = user;
      this.streamDestroyedHandler = function(event) {
        return Game.prototype.streamDestroyedHandler.apply(_this, arguments);
      };
      this.sessionDisconnectedHandler = function(event) {
        return Game.prototype.sessionDisconnectedHandler.apply(_this, arguments);
      };
      this.subscribeToStreams = function(streams) {
        return Game.prototype.subscribeToStreams.apply(_this, arguments);
      };
      this.streamCreatedHandler = function(event) {
        return Game.prototype.streamCreatedHandler.apply(_this, arguments);
      };
      this.sessionConnectedHandler = function(event) {
        return Game.prototype.sessionConnectedHandler.apply(_this, arguments);
      };
      this.tooManyUsers = function(streams) {
        return Game.prototype.tooManyUsers.apply(_this, arguments);
      };
      this.findNew = function() {
        return Game.prototype.findNew.apply(_this, arguments);
      };
      this.startWaiting = function() {
        return Game.prototype.startWaiting.apply(_this, arguments);
      };
      this.startVideoChat = function(sid) {
        return Game.prototype.startVideoChat.apply(_this, arguments);
      };
      this.lineRef = new Firebase('https://songzdemo.firebaseIO.com/waitlist/');
      console.log("I am " + this.user.id);
      $("#loginContainer").hide();
      $.get("http://apigenerator.herokuapp.com/getSession?contact=" + this.user.id, function(r) {
        _this.apiKey = r.apiKey;
        _this.publisher = TB.initPublisher(_this.apiKey, 'myPublisherDiv');
        _this.sessionId = r.session_id;
        return _this.token = r.token;
      });
      this.total = 0;
      return;
    }

    Game.prototype.startVideoChat = function(sid) {
      this.session = TB.initSession(this.sessionId);
      this.session.addEventListener('sessionConnected', this.sessionConnectedHandler);
      this.session.addEventListener('streamCreated', this.streamCreatedHandler);
      this.session.addEventListener("streamDestroyed", this.streamDestroyedHandler);
      this.session.addEventListener("sessionDisconnected", this.sessionDisconnectedHandler);
      return this.session.connect(this.apiKey, this.token);
    };

    Game.prototype.startWaiting = function() {
      var myRef;
      myRef = new Firebase('https://songzdemo.firebaseIO.com/waitlist/' + this.user.id);
      myRef.set({
        sessionId: this.sessionId
      });
      myRef.onDisconnect().remove();
      this.startVideoChat(this.sessionId);
      return console.log("no one available. Add to waitinglist");
    };

    Game.prototype.findNew = function() {
      var _this = this;
      if ($("#startStopButton").text() === "Start") {
        return;
      }
      if (this.session && this.session.disconnect) {
        console.log("disconnect in findNew");
        this.session.disconnect();
        return;
      }
      return this.lineRef.once('value', function(dataSnapshot) {
        var k, targetRef, _results;
        if (dataSnapshot.hasChildren()) {
          _results = [];
          for (k in dataSnapshot.val()) {
            if (k.toString() !== _this.user.id.toString()) {
              targetRef = _this.lineRef.child(k);
              _results.push(targetRef.once("value", function(targetSnapshot) {
                var val;
                val = targetSnapshot.val();
                if (val) {
                  console.log("connecting to: " + k);
                  _this.startVideoChat(targetSnapshot.val().sessionId);
                  targetRef.parent().remove();
                }
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          return _this.startWaiting();
        }
      });
    };

    Game.prototype.tooManyUsers = function(streams) {
      var e, nStreams, _i, _len;
      nStreams = 0;
      for (_i = 0, _len = streams.length; _i < _len; _i++) {
        e = streams[_i];
        if (e.connection.connectionId !== this.session.connection.connectionId) {
          nStreams += 1;
          if (nStreams >= 2) {
            return true;
          }
        }
      }
      return false;
    };

    Game.prototype.sessionConnectedHandler = function(event) {
      var _this = this;
      console.log("sessionConnected");
      if (this.tooManyUsers(event.streams)) {
        console.log("tooManyUsers");
        this.session.disconnect();
        return;
      }
      this.subscribeToStreams(event.streams);
      return window.setTimeout(function() {
        if (_this.total >= 2) {
          console.log("timeout, too many users");
          _this.session.disconnect();
        }
        return _this.session.publish(_this.publisher);
      }, Math.floor(Math.random() * 2000));
    };

    Game.prototype.streamCreatedHandler = function(event) {
      return this.subscribeToStreams(event.streams);
    };

    Game.prototype.subscribeToStreams = function(streams) {
      var div, e, _i, _len;
      for (_i = 0, _len = streams.length; _i < _len; _i++) {
        e = streams[_i];
        if (e.connection.connectionId === this.session.connection.connectionId) {
          return;
        }
        div = document.createElement('div');
        div.setAttribute('id', 'stream' + e.streamId);
        $("#subscriberContainer").append(div);
        this.session.subscribe(e, div.id);
        this.total += 1;
      }
    };

    Game.prototype.sessionDisconnectedHandler = function(event) {
      var _this = this;
      console.log("sessionDisconnected");
      this.total = 0;
      $("#subscriberContainer").html("");
      this.session.removeEventListener('sessionConnected', this.sessionConnectedHandler);
      this.session.removeEventListener('streamCreated', this.streamCreatedHandler);
      this.session.removeEventListener("streamDestroyed", this.streamDestroyedHandler);
      this.session.removeEventListener("sessionDisconnected", this.sessionDisconnectedHandler);
      event.preventDefault();
      this.session = "";
      return window.setTimeout(function() {
        return _this.findNew();
      }, Math.floor(Math.random() * 2000));
    };

    Game.prototype.streamDestroyedHandler = function(event) {
      return this.findNew();
    };

    return Game;

  })();

  game = "";

  chatRef = new Firebase('https://songzdemo.firebaseIO.com');

  authClient = new FirebaseAuthClient(chatRef, function(error, user) {
    if (error) {
      return console.log(error);
    } else {
      if (user) {
        return game = new Game({
          id: user.id
        });
      }
    }
  });

  $("#fbLoginButton").click(function() {
    return authClient.login('Facebook');
  });

  $("#startStopButton").click(function() {
    if ($(this).text() === "Start") {
      $(this).text('Stop');
      return game.findNew();
    } else {
      return $(this).text('Start');
    }
  });

  $("#nextButton").click(function() {
    return game.findNew();
  });

}).call(this);
